fn @batcher_sort(n: int, cmp_swap: fn (int, int) -> ()) -> () {
    fn @merge(i: int, len: int, r: int) -> () {
        let step = r * 2;
        if step < len {
            merge(i, len, step);
            merge(i + r, len, step);
            for j in range_step(i + r, i + len - r, step) {
                // Remove comparators for non-existing elements
                if j < n && j + r < n {
                    cmp_swap(j, j + r)
                }
            }
        } else {
            // idem
            if i < n && i + r < n {
                cmp_swap(i, i + r);
            }
        }
    }

    fn @sort(i: int, len: int) -> () {
        if len > 1 {
            let m = len / 2;
            sort(i, m);
            sort(i + m, m);
            merge(i, len, 1)
        }
    }

    // Compute closest power of two
    let p = 1 << ilog2(n);
    sort(0, p)
}

fn @ilog2(i: int) -> int {
    fn @(?i) ilog2_helper(i: int, p: int) -> int {
        if i <= 1 {
            p
        } else {
            ilog2_helper(i / 2, p + 1)
        }
    }
    ilog2_helper(i, 0)
}

fn @(?a & ?b) range_step(a: int, b: int, @ c: int, @ body: fn (int) -> ()) -> () {
    if a < b {
        @@body(a);
        range_step(a + c, b, c, body, return)
    }
}

fn @validate(arr: &[int * 8]) -> bool {
    let mut prev = arr(0);
    fn @rec(i: int) -> bool {
        if i < 8 {
            if prev <= arr(i) {
                prev = arr(i);
                rec(i+1)
            } else {
                false
            }
        } else {
            true
        }
    }
    rec(1)
}

fn main() -> bool {
    let mut array = [2, 6, 4, 8, 1, 3, 7, 5];
    batcher_sort(8, @ |i, j| {
        let vi = array(i);
        let vj = array(j);
        if (vi > vj) {
            array(i) = vj;
            array(j) = vi;
        }
    });
    validate(array)
}
