fn range_step(a: int, b: int, step: int, body: fn(int, fn() -> !) -> !) -> () {
    if a < b {
        body(a);
        range_step(a+step, b, step, body)
    }
}

fn blocked_loop(length: int, get_block_size: fn(int) -> int, body: fn(int, fn(int) -> !) -> !) -> int {
    fn blocked_iter(cur_level: int, i: int, N: int) -> int {
        let block_size = get_block_size(cur_level);
        if block_size <= 0 {
            body(i)
        } else {
            let mut res = 0;
            for ii in $range_step(i, N, block_size) {
                res += @blocked_iter(cur_level + 1, ii, block_size);
            }
            res
        }
    }

    @blocked_iter(1, 0, length)
}

fn main(i: int) -> int {
    fn get_block_size(i: int) -> int {
        if i == 0 { 4096 } 
        else if i == 1 { 2048 } 
        else if i == 2 { 1024 } 
        else if i == 3 { 256 } 
        else { 0 }
    }

    @blocked_loop(8192, get_block_size, |i| i)
}
