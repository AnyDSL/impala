// codegen

/* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/
 *
 * contributed by Bob W
 */

type char = u8;
type str = [char];

extern "C" {
    fn anydsl_atoi(&str) -> int;
    fn printn(&[u8], int) -> ();
    fn print(&[u8]) -> ();
    fn println(&[u8]) -> ();
    fn read(&mut [u8], int) -> int;
    fn impala_realloc(~[u8], int) -> ~[u8];
    fn impala_memmove(&u8, &u8, int) -> ();
}

static nullptr = 0 as ~[u8];

static JBFSIZE = 82;            // line input buffer size
static QBFSIZE = 5200;        // output buffer initial size

fn errex(s: &[u8]) -> () {            // error message+value, return 1
    println("*** Error: ");
    println(s);
    println("\n");
}

static EXIT_FAILURE = 1;

fn main(argc: int, argv: &[&str]) -> int {
    let n = if argc >= 2 { anydsl_atoi(argv(1)) } else { 0 };
    let mut jjj: [u8*82];        // allocate input line buffer
    let mut qqq = ~[QBFSIZE: u8];   // output buffer (dyn. size)
    let mut pqstop = QBFSIZE;        // size of qqq
    let xtab = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0"
               "\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"; // char conversion table

    let mut pj = read(&mut jjj, JBFSIZE) == 1;                 // fetch 1st line

    if (!pj) {
        errex("No input data");
        return(EXIT_FAILURE)
    }
    if (jjj(0) != '>') {
        errex("1st char not '>'");
        return(EXIT_FAILURE)
    }

    while pj {                       // MAIN LOOP: process data
        print(&jjj);                   // output ID line

        let mut pr = pqstop;
        let mut pq = 1;

        while true {                    // LOOP: fill output buffer
            pj = read(&mut jjj, JBFSIZE) == 1;     // get line from stdin
            if !pj || (jjj(0) == '>') {
                break()       // EOF or new ID line
            }
            if (pr <= (pq+61)) {            // resize buffer
                let newstop = pqstop + 12777888;
                qqq = impala_realloc(qqq, newstop);
                if (qqq == nullptr) {
                    errex("Out of memory");
                    return(EXIT_FAILURE)
                }
                let newpr = newstop-(pqstop-pr);
                impala_memmove(&qqq(newpr), &qqq(pr), pqstop-pr);
                pr = newpr;
                pqstop = newstop;            // buffer resize complete

            }
            let mut idx = 0;
            while (jjj(idx) != 0u8) {          // LOOP: conv. & revert line
                let c = xtab(jjj(idx++));
                if (c != 0u8) {                  // conversion valid
                    qqq(--pr) = c;
                }
            }

            pq++;
        }

        pq = 0;
        while pr < pqstop {
            let x = if (pqstop-pr) < 60 { pqstop-pr } else { 60 };
            impala_memmove(&qqq(pq),&qqq(pr),x);                // move line to free space
            pr+=x;
            pq+=x;
            qqq(pq++) = 0xA_u8;       // adjust pointers, add LF
        }
        printn(qqq, pq);
    }
    0
}
