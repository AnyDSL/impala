type char = u8;
type str = [char];

extern "C" {
    fn atoi(&str) -> int;
    fn sqrt(f64) -> f64;
    fn print_f64(f64) -> ();
}

static pi           = 3.141592653589793;
static solar_mass   = 4.0 * pi * pi;
static year         = 365.24;

struct planet {
    x: [f64 * 3],
    v: [f64 * 3],
    mass: f64,
}

static mut bodies = [
    planet{ // sun
        x: [0.0, 0.0, 0.0], 
        v: [0.0, 0.0, 0.0], 
        mass: solar_mass
    },
    planet{ // jupiter
        x: [4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01],
        v: [1.66007664274403694e-03 * year, 7.69901118419740425e-03 * year, -6.90460016972063023e-05 * year],
        mass: 9.54791938424326609e-04 * solar_mass
    }, 
    planet{ // saturn
        x: [8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01],
        v: [-2.76742510726862411e-03 * year, 4.99852801234917238e-03 * year, 2.30417297573763929e-05 * year],
        mass: 2.85885980666130812e-04 * solar_mass
    }, 
    planet{ // uranus
        x: [1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01],
        v: [2.96460137564761618e-03 * year, 2.37847173959480950e-03 * year, -2.96589568540237556e-05 * year],
        mass: 4.36624404335156298e-05 * solar_mass
    }, 
    planet{ // neptune
        x: [1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01],
        v: [2.68067772490389322e-03 * year, 1.62824170038242295e-03 * year, -9.51592254519715870e-05 * year],
        mass: 5.15138902046611451e-05 * solar_mass
   }
];

static N = 5;

fn range(a: int, b: int, body: fn(int) -> ()) -> () {
    if a < b {
        body(a);
        range(a+1, b, body, return)
    }
}

fn advance(mut bodies: &[planet], dt: f64) -> () {
    for i in range(0, N-1) {
        for j in range(i+1, N) {
            let d0 = bodies(i).x(0) - bodies(j).x(0);
            let d1 = bodies(i).x(1) - bodies(j).x(1);
            let d2 = bodies(i).x(2) - bodies(j).x(2);

            let d = d0*d0 + d1*d1 + d2*d2;
            let mag = dt / (d * sqrt(d));

            bodies(i).v(0) -= d0 * bodies(j).mass * mag;
            bodies(i).v(1) -= d1 * bodies(j).mass * mag;
            bodies(i).v(2) -= d2 * bodies(j).mass * mag;

            bodies(j).v(0) += d0 * bodies(i).mass * mag;
            bodies(j).v(1) += d1 * bodies(i).mass * mag;
            bodies(j).v(2) += d2 * bodies(i).mass * mag;
        }
    }

    for i in range(0, N) {
        bodies(i).x(0) += dt * bodies(i).v(0);
        bodies(i).x(1) += dt * bodies(i).v(1);
        bodies(i).x(2) += dt * bodies(i).v(2);
    }
}

fn energy(bodies: &[planet]) -> f64 {
    let mut e = 0.0;
    for i in range(0, N) {
        e += 0.5 * bodies(i).mass * (
              bodies(i).v(0) * bodies(i).v(0) 
            + bodies(i).v(1) * bodies(i).v(1) 
            + bodies(i).v(2) * bodies(i).v(2));

        for j in range(i+1, N) {
            let d0 = bodies(i).x(0) - bodies(j).x(0);
            let d1 = bodies(i).x(1) - bodies(j).x(1);
            let d2 = bodies(i).x(2) - bodies(j).x(2);
            e -= (bodies(i).mass * bodies(j).mass) / sqrt(d0*d0 + d1*d1 + d2*d2);
        }
    }

    e
}

fn offset_momentum(mut bodies: &[planet]) -> () {
    for i in range(0, N) {
        bodies(0).v(0) -= bodies(i).v(0) * bodies(i).mass / solar_mass;
        bodies(0).v(1) -= bodies(i).v(1) * bodies(i).mass / solar_mass;
        bodies(0).v(2) -= bodies(i).v(2) * bodies(i).mass / solar_mass;
    }
}

fn main(argc: int, argv: &[&str]) -> int {
    let n = if argc >= 2 { atoi(argv(1)) } else { 0 };
    offset_momentum(&bodies);
    print_f64(energy(&bodies));
    for _ in range(0, n) {
        advance(&bodies, 0.01);
    }
    print_f64(energy(&bodies));
    0
}
