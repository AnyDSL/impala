extern "C" {
    fn print_int(int) -> ();
}
fn range(a : int, b : int, yield : fn(int) -> ()) -> () {
    if a < b {
        yield(a);
        range(a+1, b, yield, return)
    }
}
fn sort(num : int, mut arr : &[i64]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}

fn main() -> int {
    let levels = 2;
    let mut times = ~[2:i64];

    fn vcycle_dsl_intern(level : int) -> () {
        sort(2, times);
        if level == levels-1 {
            print_int(times(1) as int);
        } else {
            vcycle_dsl_intern(level+1);
            times(level) = 0i64;
        }
    }
    @vcycle_dsl_intern(0);
    if true { 0 } else { 1 }
}

